/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.18.1)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace ThriftSpecification.Shared
{

  public partial class InvalidOperationException : TException, TBase
  {
    private global::ThriftSpecification.Shared.Operation _operation;
    private string _comment;

    /// <summary>
    /// 
    /// <seealso cref="global::ThriftSpecification.Shared.Operation"/>
    /// </summary>
    public global::ThriftSpecification.Shared.Operation Operation
    {
      get
      {
        return _operation;
      }
      set
      {
        __isset.operation = true;
        this._operation = value;
      }
    }

    public string Comment
    {
      get
      {
        return _comment;
      }
      set
      {
        __isset.comment = true;
        this._comment = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool operation;
      public bool comment;
    }

    public InvalidOperationException()
    {
    }

    public InvalidOperationException DeepCopy()
    {
      var tmp5 = new InvalidOperationException();
      if(__isset.operation)
      {
        tmp5.Operation = this.Operation;
      }
      tmp5.__isset.operation = this.__isset.operation;
      if((Comment != null) && __isset.comment)
      {
        tmp5.Comment = this.Comment;
      }
      tmp5.__isset.comment = this.__isset.comment;
      return tmp5;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Operation = (global::ThriftSpecification.Shared.Operation)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Comment = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp6 = new TStruct("InvalidOperationException");
        await oprot.WriteStructBeginAsync(tmp6, cancellationToken);
        var tmp7 = new TField();
        if(__isset.operation)
        {
          tmp7.Name = "operation";
          tmp7.Type = TType.I32;
          tmp7.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await oprot.WriteI32Async((int)Operation, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Comment != null) && __isset.comment)
        {
          tmp7.Name = "comment";
          tmp7.Type = TType.String;
          tmp7.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await oprot.WriteStringAsync(Comment, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is InvalidOperationException other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.operation == other.__isset.operation) && ((!__isset.operation) || (global::System.Object.Equals(Operation, other.Operation))))
        && ((__isset.comment == other.__isset.comment) && ((!__isset.comment) || (global::System.Object.Equals(Comment, other.Comment))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.operation)
        {
          hashcode = (hashcode * 397) + Operation.GetHashCode();
        }
        if((Comment != null) && __isset.comment)
        {
          hashcode = (hashcode * 397) + Comment.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp8 = new StringBuilder("InvalidOperationException(");
      int tmp9 = 0;
      if(__isset.operation)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("Operation: ");
        Operation.ToString(tmp8);
      }
      if((Comment != null) && __isset.comment)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("Comment: ");
        Comment.ToString(tmp8);
      }
      tmp8.Append(')');
      return tmp8.ToString();
    }
  }

}
